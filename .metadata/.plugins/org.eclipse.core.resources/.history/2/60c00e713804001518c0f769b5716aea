package andrew.deng.multithreading;

import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;

public class ParallelArrayInitializer {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		long[] longArr = new long[9000000];
		long startTime = System.currentTimeMillis();
		parallelAssignValues(longArr);
		long endTime = System.currentTimeMillis();
		System.out.println("parallel method time is: " + (endTime - startTime));

	}

	public static void parallelAssignValues(long[] list) {
		RecursiveAction mainTask = new ParalleAssignValueTask(list);
		ForkJoinPool pool=new ForkJoinPool();
		pool.invoke(mainTask);

	}

	private static class ParalleAssignValueTask extends RecursiveAction {

		private long list[];

		public ParalleAssignValueTask(long[] list) {
			super();
			this.list = list;
		}

		@Override
		protected void compute() {
			long[] firstHalf = new long[list.length / 2];
			System.arraycopy(list, 0, firstHalf, 0, list.length / 2);

			int secondHalfLength = list.length - list.length / 2;
			long[] secondHalf = new long[secondHalfLength];

			System.arraycopy(list, list.length / 2, secondHalf, 0,
					secondHalfLength);
			
			invokeAll(new ParalleAssignValueTask(firstHalf),new ParalleAssignValueTask(secondHalfLength));

		}

	}

}
