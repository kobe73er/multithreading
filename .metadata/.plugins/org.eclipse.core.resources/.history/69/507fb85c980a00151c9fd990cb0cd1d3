package andrew.deng.threadgroup;

//~--- JDK imports ------------------------------------------------------------

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import javax.swing.JOptionPane;

public class SuspendThreadDemo {

    public static void main(String[] args) {
        final ThreadGroup systemGroup = getSystemThreadGroup();

        final Thread periodPauseTask = new Thread(systemGroup, new Runnable() {

            @Override
            public void run() {
                Thread userInputThread = null;
                final ThreadGroup[] tgLst = new ThreadGroup[systemGroup.activeGroupCount()];
                final Thread[] tLst = new Thread[systemGroup.activeCount()];
                final int systemGroupThreadLstLength = systemGroup.enumerate(tLst, false);
                int systemGroupGroupLstLength = systemGroup.enumerate(tgLst, false);

                System.out.println("------------------Thread under system group----------------------");

                for (int i = 0; i < systemGroupThreadLstLength; i++) {
                    System.out.println("tLst[" + i + "]=" + tLst[i]);

                    if (tLst[i] == Thread.currentThread()) {
                        userInputThread = new Thread(new Runnable() {

                            @SuppressWarnings("deprecation")
                            @Override
                            public void run() {
                                int n = JOptionPane.showConfirmDialog(null, "continue running?", null,
                                        JOptionPane.YES_NO_OPTION);

                                if (n == JOptionPane.OK_OPTION) {
                                    for (int i = 0; i < systemGroupThreadLstLength; i++) {
                                        System.out.println("deep run: " + tLst[i]);
                                        tLst[i].resume();
                                    }

                                    for (int j = 0; j < tgLst.length; j++) {
                                        tgLst[j].resume();
                                    }
                                } else {
                                    System.exit(0);
                                }
                            }
                        }, "SwingThreadForUserInput");

                        continue;
                    }

                    tLst[i].suspend();
                }

                System.out.println("-------------------Group under system group----------------------------");

                for (int j = 0; j < systemGroupGroupLstLength; j++) {
                    System.out.println("tgLst[" + j + "]=" + tgLst[j]);
                    tgLst[j].suspend();
                }

                System.out.println("-------------------Current live threads total------------------------------");
                System.out.println(systemGroup.activeCount());
                System.out.println(
                        "-------------------Current live threads state in system group------------------------------");

                for (int i = 0; i < systemGroupThreadLstLength; i++) {
                    System.out.println("tLst[" + i + "]'s [" + tLst[i].getName() + "]" + "state is: "
                            + tLst[i].getState());
                }

                if (null != userInputThread) {
                    userInputThread.start();
                }

                System.out.println("-------------------------------------------------");
            }
        }, "threadUnderSystem");

        new Thread(systemGroup, new Runnable() {

            @Override
            public void run() {
                ScheduledExecutorService scheduledPool = Executors.newScheduledThreadPool(4);
                scheduledPool.scheduleWithFixedDelay(periodPauseTask, 0, 1000, TimeUnit.SECONDS);

            }

        }).start();;

        // This thread is under main thread group
        new Thread(new Runnable() {

            @Override
            public void run() {

                while (true) {
                    System.out.println(
                            "----------------printSignalThread under main group begin---------------------------");
                    System.out.println("I am printing thread under main ThreadGroup...");

                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }, "printSignalThread").start();

        new Thread(new Runnable() {

            @Override
            public void run() {
                while (true) {

                    System.out.println("------------------continue running and threads now---------------------------");

                    systemGroup.list();
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

            }

        }, "showCurrentThread").start();
    }

    public static ThreadGroup getSystemThreadGroup() {
        ThreadGroup system = null;
        ThreadGroup tg = Thread.currentThread().getThreadGroup();

        while (tg != null) {
            system = tg;
            tg = tg.getParent();
        }

        return system;
    }
}

//~ Formatted by Jindent --- http://www.jindent.com
