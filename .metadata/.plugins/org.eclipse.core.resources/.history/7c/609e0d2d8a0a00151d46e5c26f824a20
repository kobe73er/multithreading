package andrew.deng.threadgroup;

import javax.swing.JOptionPane;

public class SuspendThreadDemo {

    public static void main(String[] args) {
        final ThreadGroup systemGroup = getSystemThreadGroup();

        new Thread(systemGroup, new Runnable() {

            @Override
            public void run() {
                Thread userInputThread = null;

                final ThreadGroup[] tgLst = new ThreadGroup[systemGroup
                        .activeGroupCount()];
                final Thread[] tLst = new Thread[systemGroup.activeCount()];
                final int systemGroupThreadLstLength = systemGroup.enumerate(
                        tLst, false);
                int systemGroupGroupLstLength = systemGroup.enumerate(tgLst,
                        false);
                System.out
                        .println("------------------Thread under system group----------------------");
                for (int i = 0; i < systemGroupThreadLstLength; i++) {
                    System.out.println("tLst[" + i + "]=" + tLst[i]);
                    if (tLst[i] == Thread.currentThread()) {
                        userInputThread = new Thread(new Runnable() {

                            @SuppressWarnings("deprecation")
                            @Override
                            public void run() {
                                int n = JOptionPane.showConfirmDialog(null,
                                        "continue running?", null,
                                        JOptionPane.YES_NO_OPTION);
                                if (n == JOptionPane.OK_OPTION) {
                                    for (int i = 0; i < systemGroupThreadLstLength; i++) {
                                        System.out.println("deep run: "
                                                + tLst[i]);
                                        tLst[i].resume();
                                    }
                                    for (int j = 0; j < tgLst.length; j++) {
                                        tgLst[j].resume();
                                    }
                                    Thread.currentThread().stop();
                                } else {}
                            }

                        }, "SwingThreadForUserInput");
                        continue;
                    }
                    tLst[i].suspend();
                }
                System.out
                        .println("-------------------Group under system group----------------------------");
                for (int j = 0; j < systemGroupGroupLstLength; j++) {
                    System.out.println("tgLst[" + j + "]=" + tgLst[j]);
                    tgLst[j].suspend();
                }
                if (null != userInputThread) {
                    userInputThread.start();
                }
                System.out
                        .println("-------------------------------------------------");
            }

        }, "threadUnderSystem").start();

        System.out.println("----------------systemGroup.list()------------------");
        systemGroup.list();
        System.out.println("----------------------------------------------------");

        //
        // new Thread(systemGroup,new Runnable(){
        //
        // @Override
        // public void run() {
        // while(true){
        // System.out.println("threadUnderSystemGroupTwo is executing...");
        // try {
        // Thread.sleep(1000);
        // } catch (InterruptedException e) {
        // // TODO Auto-generated catch block
        // e.printStackTrace();
        // }
        // }
        //
        //
        // }
        //
        // },"threadUnderSystemGroupTwo").start();
        //
        // new Thread(systemGroup,new Runnable(){
        //
        // @Override
        // public void run() {
        // System.out.println("threadUnderSystemGroupThree is executing...");
        // try {
        // Thread.sleep(1000);
        // } catch (InterruptedException e) {
        // // TODO Auto-generated catch block
        // e.printStackTrace();
        // }
        //
        // }
        //
        // },"threadUnderSystemGroupThree").start();

        // This thread is under main thread group
        new Thread(new Runnable() {

            @Override
            public void run() {
                System.out.println("----------------printSignalThread under main group begin---------------------------");
                while (true) {
                    System.out
                            .println("I am printing thread under main ThreadGroup...");
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }

        }, "printSignalThread").start();
    }

    public static ThreadGroup getSystemThreadGroup() {
        ThreadGroup system = null;
        ThreadGroup tg = Thread.currentThread().getThreadGroup();
        while (tg != null) {
            system = tg;
            tg = tg.getParent();
        }
        return system;
    }

}
