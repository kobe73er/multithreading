package andrew.deng.multithreading.countdownlatchTest;

import java.util.concurrent.CountDownLatch;

public class mainTest {

	private abstract class BaseService implements Runnable {
		private CountDownLatch countDownLatchIns;
		private String serviceName;
		private boolean isServiceUp;

		public BaseService(CountDownLatch countDownLatchIns,
				String serviceName, boolean isServiceUp) {
			super();
			this.countDownLatchIns = countDownLatchIns;
			this.serviceName = serviceName;
			this.isServiceUp = isServiceUp;
		}

		public void run() {

			verifyService();
			isServiceUp = true;
			countDownLatchIns.countDown();
		}

		public abstract void verifyService();
	}

	private class DatabaseService extends BaseService {

		public DatabaseService(CountDownLatch countDownLatchIns,
				String serviceName, boolean isServiceUp) {
			super(countDownLatchIns, serviceName, isServiceUp);
		}

		@Override
		public void verifyService() {

		}

	}

	private class NetworkService extends BaseService {

		public NetworkService(CountDownLatch countDownLatchIns,
				String serviceName, boolean isServiceUp) {
			super(countDownLatchIns, serviceName, isServiceUp);
		}

		@Override
		public void verifyService() {

		}

	}

	private class BaseHealthCheckerService extends BaseService {

		public BaseHealthCheckerService(CountDownLatch countDownLatchIns,
				String serviceName, boolean isServiceUp) {
			super(countDownLatchIns, serviceName, isServiceUp);
			// TODO Auto-generated constructor stub
		}

		@Override
		public void verifyService() {
			// TODO Auto-generated method stub

		}

	}

}
